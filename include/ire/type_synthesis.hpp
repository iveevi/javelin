#pragma once

#include "../thunder/atom.hpp"
#include "primitive.hpp"
#include "uniform_layout.hpp"
#include "tagged.hpp"
#include "emitter.hpp"

namespace jvl::ire {

// Forward declarations
template <typename T>
constexpr thunder::PrimitiveType synthesize_primitive_type();

// Fundamental types for IRE
template <typename T>
concept generic = primitive_type <T> || synthesizable <T> || uniform_compatible <T>;

template <typename T>
concept non_trivial_generic = synthesizable <T> || uniform_compatible <T>;

template <typename T>
concept non_trivial_generic_or_void = synthesizable <T> || uniform_compatible <T> || std::same_as <T, void>;

// Automatically determining layout types
template <string_literal name, non_trivial_generic T>
inline auto field(const T &ref)
{
	return __field <name, T> (&static_cast <const tagged &> (ref));
}

template <typename ... Ts, typename ... Us>
auto layout_cat(const_uniform_layout_t <Ts...>, const_uniform_layout_t <Us...>) -> const_uniform_layout_t <Ts..., Us...>;

template <typename ... Args>
struct layout_generator {
	using type = void;
};

template <typename T, string_literal name>
struct layout_generator <__field <name, T>> {
	using type = const_uniform_layout_t <T>;
};

template <typename T, string_literal name, typename ... Args>
struct layout_generator <__field <name, T>, Args...> {
	using single_type = const_uniform_layout_t <T>;
	using args_type = layout_generator <Args...> ::type;
	using type = decltype(layout_cat(single_type(), args_type()));
};

// User end functions to specify members
template <typename ... Args>
auto uniform_layout(const std::string &name, const Args &... args)
{
	static_assert((__field_type <Args> && ...),
		"uniform_layout arguments should ALL be field types "
		"(i.e. generated by field <...> (...))");

	typename layout_generator <Args...> ::type layout;
	layout.name = name;
	layout.fields.resize(sizeof...(Args));

	// Better (compile-time) error handling; no need to release
	// the compiler's error explosion to the user
	if constexpr ((__field_type <Args> && ...))
		__const_init(layout.fields.data(), 0, args...);

	return layout;
}

// Synthesize types for an entire sequence of arguments
template <typename T, typename ... Args>
cache_index_t type_field_from_args()
{
	auto &em = Emitter::active;

	thunder::TypeField tf;

	if constexpr (uniform_compatible <T>) {
		using layout_t = decltype(T().layout());
		tf.down = type_field_from_args(layout_t()).id;
	} else {
		tf.item = synthesize_primitive_type <T> ();
	}

	if constexpr (sizeof...(Args))
		tf.next = type_field_from_args <Args...> ().id;
	else
		tf.next = -1;

	cache_index_t cached;
	cached = em.emit(tf);
	return cached;
}

template <typename ... Args>
cache_index_t type_field_from_args(const uniform_layout_t <Args...> &args)
{
	return type_field_from_args <Args...> ();
}

template <typename ... Args>
cache_index_t type_field_from_args(const const_uniform_layout_t <Args...> &args)
{
	return type_field_from_args <Args...> ();
}

// Synthesize types for a specific index from a sequence of arguments
template <typename T, typename ... Args>
cache_index_t type_field_index_from_args(int index)
{
	if constexpr (sizeof...(Args)) {
		if (index > 0)
			return type_field_index_from_args <Args...> (index);
	}

	auto &em = Emitter::active;

	thunder::TypeField tf;

	if constexpr (uniform_compatible <T>) {
		using layout_t = decltype(T().layout());
		tf.down = type_field_from_args(layout_t()).id;
	} else {
		tf.item = synthesize_primitive_type <T> ();
	}

	cache_index_t cached;
	cached = em.emit(tf);
	return cached;
}

template <typename ... Args>
cache_index_t type_field_index_from_args(int index, const uniform_layout_t <Args...> &args)
{
	return type_field_index_from_args <Args...> (index);
}

template <typename ... Args>
cache_index_t type_field_index_from_args(int index, const const_uniform_layout_t <Args...> &args)
{
	return type_field_index_from_args <Args...> (index);
}

} // namespace jvl::ire
