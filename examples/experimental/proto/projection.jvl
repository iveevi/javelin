import core;

@core.uniform_compatible
struct mvp {
	mat4 model;
	mat4 view;
	mat4 proj;
};

@core.vertex
ftn vertex_shader(vec3 position) -> vec3
{
	using core.vertex_intrinsic.gl_Position;
	push_constant(mvp) pc;
	gl_Position = pc.proj * pc.view * pc.model * vec4(position, 1);
	return position;
}

@core.fragment
ftn fragment_shader(vec3 position) -> vec4
{
	using core.shader_math.*;
	vec3 dU = dFdx(position);
	vec3 dV = dFdyFine(position);
	vec3 N = normalize(cross(dU, dV));
	return vec4(0.5 + 0.5 * N, 0);
}
